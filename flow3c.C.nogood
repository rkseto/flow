// figure out C{6} with cumulants
// find resolution with 3sub
// go from 0-pi

#include "TH1D.h"
#include "TCanvas.h"
#include "TPad.h"
#include "TF1.h"
#include "TH1.h"
#include "TFrame.h"
#include "TROOT.h"
#include "TRandom.h"
#include "TFormula.h"
#include "TPaveLabel.h"
#include "TFile.h"
#include "TComplex.h"

#include "TMath.h"

#define PI 3.14159
#define TWOPI 6.28318

// define a function with parameters
Double_t fitf(Double_t *xx,Double_t *par) {
  double v1=par[1];
  double v2=par[2];
  double v3=par[3];
  double v4=par[4];
  double PSI=par[0];
  
  double x=xx[0];  

  double  fitval = 1./TWOPI*(
			     1.+2*v1*cos(1*(x-PSI))+2*v2*cos(2*(x-PSI))+2*v3*cos(3*(x-PSI))+2*v4*cos(4*(x-PSI))
			     );  
  return fitval;
}


void flow3c() {
  /*
This adds the direct calculations of the Q's to save time

Parameters of fit should be vn^2
3 particle correlation = vn*vn*v2n
4 particle correlation should be -vn^4  
   */


  // we will define our histograms here
   TH1D *v2h = new TH1D("v2h","v2 contribution track by track",200,-1.2,1.2);
   TH1D *reseventplaneh = new TH1D("reseventplaneh","event plane reslution event",1000,-PI,PI);

   TH1D *reseventplaneah = new TH1D("reseventplaneah","event plane reslution event subevent a - b",1000,-PI,PI);
   TH1D *reseventplanebh = new TH1D("reseventplanebh","event plane reslution event subevent b-c",1000,-PI,PI);
   TH1D *reseventplanech = new TH1D("reseventplanech","event plane reslution event subevent c-a",1000,-PI,PI);

   TH1D *phih = new TH1D("phih","phih",100,-TWOPI,TWOPI);
   
   TH1D *phitrackseventh = new TH1D("phitrackseventh","phitrackseventh",100,0,TWOPI);

   TH1D *dphirealh = new TH1D("dphirealh","dphirealh",100,-PI,PI);
   TH1D *dphimeash = new TH1D("dphimeash","dphimeash",100,-PI,PI);
   
   TH1D *dphipairs_same = new TH1D("dphipairs_same","dphipairs_same",100,-PI,PI);
   TH1D *dphipairs_mixed = new TH1D("dphipairs_mixed","dphipairs_mixed",100,-PI,PI);

   TH1D *d4phih = new TH1D("d4phih","d4phi",200,-4*PI,4*PI);

   TH1D *PSI2h = new TH1D("PSI2h","event plane angle",100,-PI,PI);
   TH1D *PSI2PSI2foundh = new TH1D("PSI2PSI2foundh","event plane angle real-found",100,-2*PI,2*PI);
   TH1D *PHI2resh = new TH1D("PHI2resh","event plane resoulution 2 subevents",100,-PI,PI);   
   
   TCanvas *c1 = new TCanvas("c1","The FillRandom example",200,10,700,900);
   c1->SetFillColor(18);

   TPad *pad1 = new TPad("pad1","The pad with the function",0.05,0.50,0.95,0.95,21);
   TPad *pad2 = new TPad("pad2","The pad with the histogram",0.05,0.05,0.95,0.45,21);
   pad1->Draw();
   pad2->Draw();
   pad1->cd();   
   
                  //FXT3GeV//200GeV //test
   double v1=0.1; //0.02   // 0.05; // 0.1 // 0
   double v2=0.2; //0.05   //0.15;  // 0.2 // 0.05
   double v3=0.15; //0.01  //0.07;  //0.15  //0.
   double v4=0.05; //0.02  //0.03;  //0.05  //0.

   bool doloop=false;
   int nharmonic=2;  //2
   int nevents=4000; //1000, for nharmonic=4 need 4000
   int nparticlesav=200; //100

    cout<<"Initial values: v1="<<v1<<"  v2="<<v2<<"  v3="<<v3<<"  v4="<<v4
	<<endl<<endl;
   
   cout<<" nharmonic(2): ";
   cin>>nharmonic;
   cout<<" nharmonic set to "<<nharmonic<<endl;

   cout<<" nevents(1000): ";
   cin>>nevents;
   cout<<" nevents set to "<<nevents<<endl;

   cout<<" nparticles/event average(100): ";
   cin>>nparticlesav;
   cout<<" nparticles set to "<<nparticlesav<<endl;

   cout<<" do loops 0-no 1-yes(1): ";
   cin>>doloop;
   cout<<" doloop set to "<<doloop<<endl;

   int nparticlesmin=6;
   int ncount=100;
   if(nevents>=10000)ncount=1000;
   double PSI2=0.;
   
   TF1 *flowf = new TF1("flowf",fitf,0,TWOPI,5);
   flowf->SetParNames("PSI2","v1","v2","v3","v4");   

   flowf->SetParameters(PSI2,v1,v2,v3,v4);
      
   pad1->SetGridx();
   pad1->SetGridy();
   pad1->GetFrame()->SetFillColor(42);
   pad1->GetFrame()->SetBorderMode(-1);
   pad1->GetFrame()->SetBorderSize(5);
   flowf->SetLineColor(4);
   flowf->SetLineWidth(6);
   flowf->Draw();
   TPaveLabel *lfunction = new TPaveLabel(5,39,9.8,46,"v2 function");
   lfunction->SetFillColor(41);
   lfunction->Draw();
   c1->Update();

   //
   // Create a one dimensional histogram (one float per bin)
   // and fill it following the distribution in function flowf.
   //
   pad2->cd();
   pad2->GetFrame()->SetFillColor(42);
   pad2->GetFrame()->SetBorderMode(-1);
   pad2->GetFrame()->SetBorderSize(5);
   TH1D *h1f = new TH1D("h1f","Test of an Observed Distribution",200,0,TWOPI);
   h1f->SetFillColor(45);
   h1f->FillRandom("flowf",100000);
   h1f->Draw();
   c1->Update();
   // the previous stuff was just for illustration

   //******** NOW START WORK ***************
   // OK now lets throw events.
   int nparticles=0;
   double phitrack[10000];
   double pttrack[10000];
   double ytrack[10000];
   int nparticles_previous=0;
   double phitrack_previous[10000];
   double pttrack_previous[10000];
   double ytrack_previous[10000];

   double v2obs=0;
   int nv2count=0;

   double res_eventplane=0;
   double res_eventplanea=0;
   double res_eventplaneb=0;
   double res_eventplanec=0;
   int nrescount=0;

   TRandom *ran0 = new TRandom();
   TRandom *ran1 = new TRandom();   

   double cdphi3sumtot=0;
   double cdphisumtot=0;
   double cdphi4sumtot=0;

   nparticles=nparticlesav;

   double CF2=0; // cf from <<2>>
   double CF4=0; // cf from <<4>> <<2>>
   double CF6=0; // cf from <<6>> <<4>> <<2>>
   double bb2bb=0; // <<2>>
   double bb4bb=0; // <<4>>
   double bb6bb=0; // <<6>>
   
   // loop over events
   for(int ievent=0; ievent<nevents; ievent++){
     if(ievent%ncount==0)cout<<" ievent="<<ievent<<endl;
   // make an event **************** set V2 and PHI here
     //     nparticles=ran0->Poisson(nparticlesav);
     nparticles=nparticlesav;
     if(nparticles<nparticlesmin)continue;
     double v2Event=v2; //potentially can wiggle around (fluctuate)
     double PSI2Event=0.0;
     //     PSI2Event=ran0->Rndm()*TWOPI;
     PSI2Event=ran0->Rndm()*PI;
     PSI2h->Fill(PSI2Event);
       
     //     flowf->SetParameters(v2Event,PSI2Event,float(nharmonic));
     flowf->SetParameters(PSI2Event,v1,v2,v3,v4);

     for(int i=0; i<nparticles;i++){
       phitrack[i]=flowf->GetRandom();
       pttrack[i]=ran1->Poisson(1.); // set all pt to 1 GeV now
       //       pttrack[i]=1.; // set all pt to 1 GeV now
       ytrack[i]=1.; // set all y to 1 now

       //       if(phitrack[i]>1. && phitrack[i]<1.9)i--; // mess up acceptance
       phih->Fill(phitrack[i]);
     }
     
     // analyze event
     int ncdphisum=0;
     double cdphisum=0;
     int ncdphi3sum=0;
     double cdphi3sum=0;
     int ncdphi4sum=0;
     double cdphi4sum=0;

     TComplex Qnharmonic[12]={0,0,0,0,0,0,0,0,0,0,0,0};
     
     double Q2x=0;      // used to find the reaction plane
     double Q2y=0;

     double Q2xsub1=0;
     double Q2ysub1=0;
     double Q2xsub2=0;
     double Q2ysub2=0;
     int nhalf=nparticles/2;
     double Q2xsuba=0;
     double Q2ysuba=0;
     double Q2xsubb=0;
     double Q2ysubb=0;
     double Q2xsubc=0;
     double Q2ysubc=0;
     int nthird=nparticles/3;


     //Finding reaction plane
     for(int i=0; i<nparticles;i++){
       phitrackseventh->Fill(phitrack[i]);
       Q2x=Q2x+cos(nharmonic*phitrack[i]);
       Q2y=Q2y+sin(nharmonic*phitrack[i]);

       if(i<nhalf){
	 Q2xsub1=Q2xsub1+cos(nharmonic*phitrack[i]);
	 Q2ysub1=Q2ysub1+sin(nharmonic*phitrack[i]);
       }else if(i<2*nhalf){
	 Q2xsub2=Q2xsub2+cos(nharmonic*phitrack[i]);
	 Q2ysub2=Q2ysub2+sin(nharmonic*phitrack[i]);
       }else{
       }

       if(i<nthird){
	 Q2xsuba=Q2xsuba+cos(nharmonic*phitrack[i]);
	 Q2ysuba=Q2ysuba+sin(nharmonic*phitrack[i]);
       }else if(i<2*nthird){
	 Q2xsubb=Q2xsubb+cos(nharmonic*phitrack[i]);
	 Q2ysubb=Q2ysubb+sin(nharmonic*phitrack[i]);
       }else if(i<3*nthird){
       }else{
	 Q2xsubc=Q2xsubc+cos(nharmonic*phitrack[i]);
	 Q2ysubc=Q2ysubc+sin(nharmonic*phitrack[i]);
       }

     }
     /*
     double PSI2found=atan2(Q2y,Q2x)/nharmonic;
     double dpsieventfound=PSI2Event-PSI2found; // CHECK THIS and plot
       if(dpsieventfound>TWOPI){
	   dpsieventfound=dpsieventfound-TWOPI;
	     }else if(dpsieventfound<-TWOPI){
	   dpsieventfound=dpsieventfound+TWOPI;
	     }else{
	 }

       if(dpsieventfound>PI){
	   dpsieventfound=PI-dpsieventfound;
	     }else if(dpsieventfound<-PI){
	   dpsieventfound=-dpsieventfound+PI;
	     }else{
	 }
     */
       
     PSI2PSI2foundh->Fill(dpsieventfound);     
     double PSI2foundsub1=atan2(Q2ysub1,Q2xsub1)/nharmonic;
     double PSI2foundsub2=atan2(Q2ysub2,Q2xsub2)/nharmonic;

     double PSI2foundsuba=atan2(Q2ysuba,Q2xsuba)/nharmonic;
     double PSI2foundsubb=atan2(Q2ysubb,Q2xsubb)/nharmonic;
     double PSI2foundsubc=atan2(Q2ysubc,Q2xsubc)/nharmonic;

     double PSI2restmp=0;     
     double dpsi=PSI2foundsub1-PSI2foundsub2; // CHECK THIS and plot
     double PSI2restmpa=0;     
     double dpsia=PSI2foundsuba-PSI2foundsubb; // CHECK THIS and plot
     double PSI2restmpb=0;     
     double dpsib=PSI2foundsubb-PSI2foundsubc; // CHECK THIS and plot
     double PSI2restmpc=0;     
     double dpsic=PSI2foundsubc-PSI2foundsuba; // CHECK THIS and plot

       if(dpsi>PI){
	   dpsi=TWOPI-dpsi;
	     }else if(dpsi<-PI){
	   dpsi=-TWOPI-dpsi;
	     }else{
	 }
       if(dpsi>PI/2){
	   dpsi=PI-dpsi;
	     }else if(dpsi<-PI/2){
	   dpsi=-PI-dpsi;
	     }else{
	 }

       if(dpsia>PI){
	   dpsia=TWOPI-dpsia;
	     }else if(dpsia<-PI){
	   dpsia=-TWOPI-dpsia;
	     }else{
	 }
       if(dpsia>PI/2){
	   dpsia=PI-dpsia;
	     }else if(dpsia<-PI/2){
	   dpsia=-PI-dpsia;
	     }else{
	 }
       if(dpsia>PI){
	   dpsia=TWOPI-dpsia;
	     }else if(dpsia<-PI){
	   dpsia=-TWOPI-dpsia;
	     }else{
	 }
       if(dpsia>PI/2){
	   dpsia=PI-dpsia;
	     }else if(dpsia<-PI/2){
	   dpsia=-PI-dpsia;
	     }else{
	 }
       if(dpsic>PI){
	   dpsic=TWOPI-dpsic;
	     }else if(dpsic<-PI){
	   dpsic=-TWOPI-dpsic;
	     }else{
	 }
       if(dpsic>PI/2){
	   dpsic=PI-dpsic;
	     }else if(dpsic<-PI/2){
	   dpsic=-PI-dpsic;
	     }else{
	 }

       
      PHI2resh->Fill(dpsi);
       
     PSI2restmp=cos(nharmonic*(dpsi));
     PSI2restmpa=cos(nharmonic*(dpsia));
     PSI2restmpb=cos(nharmonic*(dpsib));
     PSI2restmpc=cos(nharmonic*(dpsic)); 
     //     cout<<" PSI2found="<<PSI2found<<" subevent1="<<PSI2foundsub1<<" subevent2="<<PSI2foundsub2<<" restmp="<<PSI2restmp <<endl;

     reseventplaneh->Fill(dpsi);
     reseventplaneah->Fill(dpsia);
     reseventplanebh->Fill(dpsib);
     reseventplanech->Fill(dpsic);
     //finish of reaction plane

     
     res_eventplane+=PSI2restmp;
     nrescount++;
     res_eventplanea+=PSI2restmpa;
     res_eventplaneb+=PSI2restmpb;
     res_eventplanec+=PSI2restmpc;
     //     cout<<" *** PSI2restmpa="<<PSI2restmpa<<" PSI2restmpb="<<PSI2restmpb<<" PSI2restmpc="<<PSI2restmpc<<endl;

     double Qnx[12]={0,0,0,0,0,0,0,0,0,0,0,0};
     double Qny[12]={0,0,0,0,0,0,0,0,0,0,0,0};
     
     // now that we have the reaction plane calculate v2 and Q's
     for(int i=0; i<nparticles;i++){
       double dphi=phitrack[i]-PSI2found-PI;  // CHECK THIS
       if(dphi>PI){
	   dphi=TWOPI-dphi;
	     }else if(dphi<-PI){
	   dphi=-TWOPI-dphi;
	     }else{
	 }

       double dphireal=phitrack[i]-PSI2Event-PI;  // CHECK THIS
       if(dphireal>PI){
	   dphireal=TWOPI-dphireal;
	     }else if(dphireal<-PI){
	   dphireal=-TWOPI-dphireal;
	     }else{
	 }

       dphirealh->Fill(dphireal);
       dphimeash->Fill(dphi);

       
       if(dphi>PI){
	   dphi=TWOPI-dphi;
	     }else if(dphi<-PI){
	   dphi=-TWOPI-dphi;
	     }else{
	 }
       //-------------------
       
       v2obs+=cos(nharmonic*(dphi)); 
       v2h -> Fill(cos(nharmonic*(dphi)));
       nv2count++;

       // calculate Qvectors
       for(int j=0; j<12; j++){
	 Qnx[j]+=cos((j+1)*phitrack[i]);
	 Qny[j]+=sin((j+1)*phitrack[i]);
	 Qnharmonic[j]+=TComplex(cos((j+1)*phitrack[i]),sin((j+1)*phitrack[i]),false);     
       }

     }// end loop over particles

     // see PRC 83 044913
     
     double qn2=Qnharmonic[nharmonic-1].Rho2();// Q_nharmonic^2
     double b2b=qn2;
     b2b=(b2b-nparticles)/nparticles/(nparticles-1);

     TComplex tmpc;
     
     double qn4=qn2*qn2;// Q_nharmonic^4 
     double q2n2=Qnharmonic[2*nharmonic-1].Rho2();// Q_2*nharmonic^2
     tmpc=Qnharmonic[2*nharmonic-1]*TComplex::Conjugate(Qnharmonic[nharmonic-1])*TComplex::Conjugate(Qnharmonic[nharmonic-1]);
     double q2nnstarnstar=tmpc.Re();
     double b4b = qn4+q2n2-2*q2nnstarnstar-2*2*(nparticles-2)*qn2+2*nparticles*(nparticles-3);
     b4b=b4b/(nparticles*(nparticles-1)*(nparticles-2)*(nparticles-3));

     double qn6=qn4*qn2; //Q_n^6
     double q3n2=Qnharmonic[3*nharmonic-1].Rho2(); //Q3n^2
     double q2n2n2=q2n2*qn2;
     tmpc=Qnharmonic[2*nharmonic-1]*Qnharmonic[nharmonic-1]*TComplex::Conjugate(Qnharmonic[nharmonic-1])*TComplex::Conjugate(Qnharmonic[nharmonic-1])*TComplex::Conjugate(Qnharmonic[nharmonic-1]);
     double q2nnnstarnstarnstar = tmpc.Re();
     tmpc=Qnharmonic[3*nharmonic-1]*TComplex::Conjugate(Qnharmonic[nharmonic-1])*TComplex::Conjugate(Qnharmonic[nharmonic-1])*TComplex::Conjugate(Qnharmonic[nharmonic-1]);
     double q3nnstarnstarnstar = tmpc.Re();
     tmpc=Qnharmonic[3*nharmonic-1]*TComplex::Conjugate(Qnharmonic[2*nharmonic-1])*TComplex::Conjugate(Qnharmonic[nharmonic-1]);
     double q3n2nstarnstar = tmpc.Re();
     double t1=qn6+9*q2n2*qn2-6*q2nnnstarnstarnstar;
     t1=t1/nparticles/(nparticles-1)/(nparticles-2)/(nparticles-3)/(nparticles-4)/(nparticles-5);
     double t2=q3nnstarnstarnstar-3*q3n2nstarnstar;
     t2=t2/nparticles/(nparticles-1)/(nparticles-2)/(nparticles-3)/(nparticles-4)/(nparticles-5);
     double t3=9*(nparticles-4)*q2nnstarnstar+2*q3n2;
     t3=t3/nparticles/(nparticles-1)/(nparticles-2)/(nparticles-3)/(nparticles-4)/(nparticles-5);
     double t4=qn4+q2n2;
     t4=t4/nparticles/(nparticles-1)/(nparticles-2)/(nparticles-3)/(nparticles-5);
     double t5=qn2;
     t5=t5/nparticles/(nparticles-1)/(nparticles-3)/(nparticles-4);
     double t6=6/(nparticles-1)/(nparticles-2)/(nparticles-3);
     double b6b=t1+4*t2+2*t3-9*t4+18*t5-t6;

     //     cout<<" ts "<<t1<<" "<<t2<<" "<<t3<<" "<<t4<<" "<<t5<<" "<<t6<<endl;

     bb2bb+=b2b;
     bb4bb+=b4b;
     bb6bb+=b6b;
     
     // pairs (cumulants calculations)
     for(int i=0; i<nparticles;i++){
       for(int j=i+1; j<nparticles;j++){
	 double dphi=phitrack[i]-phitrack[j];
	 double cdphi=cos(nharmonic*(dphi));
	 ncdphisum++;
	 cdphisum+=cdphi;
	 
	 if(dphi>PI){
	   dphi=TWOPI-dphi;
	     }else if(dphi<-PI){
	   dphi=-TWOPI-dphi;
	     }else{
	 }
	 dphipairs_same->Fill(dphi);
	 
	 //-------------3 and 4 particle correlations------------------	 

	 for(int k=j+1; k<nparticles; k++){

	   if(!doloop) break;
	   
	   for(int l=k+1; l<nparticles; l++){
	     double d4phi=phitrack[i]+phitrack[j]-phitrack[k]-phitrack[l];
	     ncdphi4sum++;
	     cdphi4sum+=cos(nharmonic*d4phi);
	     d4phih->Fill(d4phi);
	   } // end l

	   double d3phi=phitrack[i]+phitrack[j]-2*phitrack[k];
	   ncdphi3sum++;
	   cdphi3sum+=cos(nharmonic*d3phi);
	 } // end k

	 //----------------------------------------------------
	 
       }// end j same

       
       if(ievent>0){
	 for(int j=i+1; j<nparticles_previous;j++){
	   double dphi=phitrack[i]-phitrack_previous[j];
	   
	   if(dphi>PI){
	     dphi=TWOPI-dphi;
	   }else if(dphi<-PI){
	     dphi=-TWOPI-dphi;
	   }else{
	   }

	   double cdphi_mixed=cos(nharmonic*(dphi));
	   dphipairs_mixed->Fill(dphi);
	 } // end j mixed
       } 
     } // end i - all particles

     cdphisumtot+=cdphisum/ncdphisum;
     cdphi3sumtot+=cdphi3sum/ncdphi3sum;
     cdphi4sumtot+=cdphi4sum/ncdphi4sum;

     // finally save the event
     nparticles_previous=nparticles;
     for(int i=0; i<nparticles;i++){
       phitrack_previous[i]=phitrack[i];
       pttrack_previous[i]=pttrack[i];
       ytrack_previous[i]=ytrack[i]; 
     }

   } // end loop over events

   // calculate CFs
   bb2bb=bb2bb/float(nevents);
   bb4bb=bb4bb/float(nevents);
   bb6bb=bb6bb/float(nevents);
   CF2=bb2bb;
   CF4=bb4bb-2*bb2bb*bb2bb;
   CF6=bb6bb-9*bb2bb*bb4bb+12*bb2bb*bb2bb*bb2bb;
   
   // calcualte eventplane resolution
   res_eventplane/=nrescount;
   res_eventplanea/=nrescount;
   res_eventplaneb/=nrescount;
   res_eventplanec/=nrescount;

   cout<<" *** res_eventplane= "<<res_eventplane<<"  a="<<res_eventplanea<<" b="<<res_eventplaneb<<" c="<<res_eventplanec<<endl;

      
   //calculate a final v2
   v2obs/=nv2count;
   
   // DIVIDE
   TH1D *dphipairs_divided = (TH1D*)dphipairs_same->Clone("dphipairs_divided");
   dphipairs_divided->Sumw2();
   dphipairs_divided->Divide(dphipairs_mixed);

   // now do a fit
   // the parameters should be vn^2
   TF1 *myfit = new TF1("myfit","[0]*(1.0+2*[1]*cos(1*x) + 2*[2]*cos(2*x)+ 2*[3]*cos(3*x)+ 2*[4]*cos(4*x)+ 2*[5]*cos(5*x) )", -PI, PI);
    dphipairs_divided->Fit("myfit");
    double fitnorm=myfit->GetParameter(0);
    double v1sq=myfit->GetParameter(1);
    double v2sq=myfit->GetParameter(2);
    double v3sq=myfit->GetParameter(3);
    double v4sq=myfit->GetParameter(4);
    double v5sq=myfit->GetParameter(5);

    //    myfit->SetParameters(fitnorm,v1sq,v2sq,v3sq,v4sq,0);

    myfit->SetParameters(fitnorm,v1sq,0,0,0,0);
    myfit->SetLineColor(3);
    myfit->DrawCopy("SAME");
    myfit->SetParameters(fitnorm,0,v2sq,0,0,0);
    myfit->SetLineColor(4);
    myfit->DrawCopy("SAME");
    myfit->SetParameters(fitnorm,0,0,v3sq,0,0);
    myfit->SetLineColor(5);
    myfit->DrawCopy("SAME");
    myfit->SetParameters(fitnorm,0,0,0,v4sq,0);
    myfit->SetLineColor(6);
    myfit->DrawCopy("SAME");

    
   TCanvas *c2 = new TCanvas("c2","The FillRandom example",200,10,700,900);
   c2->SetFillColor(18);
   c2->cd();    
   dphimeash->Fit("myfit");
   c2->Update();
   double fitnormrp=myfit->GetParameter(0);
   double v1sqrp=myfit->GetParameter(1);
   double v2sqrp=myfit->GetParameter(2);
   double v3sqrp=myfit->GetParameter(3);
   double v4sqrp=myfit->GetParameter(4);
   double v5sqrp=myfit->GetParameter(5);

   
    //--- now print out results ---------------------    
    cout<<endl;
    cout<<" nevents="<<nevents<<"  nparticlesav="<<nparticlesav<<" nharmonic="<<nharmonic<<" doloop="<<doloop<<endl;
    cout<<endl;
    cout<<"Initial values: v1="<<v1
      	<<"  v2="<<v2
      	<<"  v3="<<v3
      	<<"  v4="<<v4
	<<endl<<endl;

    cout<<" CF2="<<CF2<<" sqrt(CF2):vn{2}="<<sqrt(CF2)<<endl;
    cout<<" CF4="<<CF4<<" sqrt(sqrt(-CF4)):vn{4}="<<sqrt(sqrt(-CF4))<<endl;
    cout<<" CF6="<<CF6<<" 6throot((CF6)/4.):vn{6}="<<std::cbrt(  sqrt( (CF6/4.) )  )<<endl<<endl;
    
    cout<<"FINAL values from event plane" << endl << endl;

    res_eventplane=sqrt(2.)*sqrt(res_eventplane);
    double res_eventplane3sub=sqrt(res_eventplanea*res_eventplaneb/res_eventplanec);
    cout<<" FINAL event plane resolution="<<res_eventplane<<endl;
    cout<<" FINAL event plane resolution 3sub="<<res_eventplane3sub<<endl;
    cout<<" FINAL v"<<nharmonic<<" from Event plane="<<v2obs<<" nharmonic="<<nharmonic<<endl;
    cout<<" event plane v2 corrected for 3sub event plane="<<v2obs/res_eventplane3sub<<endl;
    cout<<" reaction plane fit: v1="<<sqrt(v1sqrp)
	<<"  v2="<<sqrt(v2sqrp)
      	<<"  v3="<<sqrt(v3sqrp)
      	<<"  v4="<<sqrt(v4sqrp)
	<<"  v5sq="<<v5sqrp
	<<endl<<endl;
    
    cout<<" 2 particle correlation fit: v1="<<sqrt(v1sq)
	<<"  v2="<<sqrt(v2sq)
      	<<"  v3="<<sqrt(v3sq)
      	<<"  v4="<<sqrt(v4sq)
	<<"  v5sq="<<v5sq
	<<endl<<endl;

    cout<<"if loops done FINAL values from particle cumulants" << endl<<endl;

    double cumulant2 = 1.*cdphisumtot/nevents;
    double cumulant3 = 1.*cdphi3sumtot/nevents;
    double cumulant4 = 1.*cdphi4sumtot/nevents;

    cout<<" 2 particle cumulant = "<<cumulant2<<endl;
    cout<<" 3 particle cumulant = "<<cumulant3<<endl;
    cout<<" 4 particle cumulant = "<<cumulant4<<endl;
    cout<<endl;

    cout<<"FINAL calculations from particle cumulants" << endl<<endl;
    cout<<" from 2 particle cumulant: v"<<nharmonic<<"="<<sqrt(cumulant2)<<endl;
    
    double cumulant4minus2 = 1.*(cumulant4-(2*(cumulant2*cumulant2)));
    cout<<" from 4 particle cumulant: v"<<nharmonic<<"="<<sqrt(sqrt(-cumulant4minus2))<<endl<<endl;
    double cum3=0;
    if(nharmonic==1)cum3=v1*v1*v2;
    if(nharmonic==2)cum3=v2*v2*v4;
    cout<<" nharmonic="<<nharmonic<<", 3 particle cumulant="<<cdphi3sumtot/nevents<<" we expect "<<cum3<<" i.e. v"<<nharmonic<<"*v"<<nharmonic<<"*v"<<2*nharmonic<<endl<<endl;
    //---------------------
    
   // Open a ROOT file and save the formula, function and histogram
   //
   TFile *myfile = new TFile("flow3c.root","RECREATE");

   flowf->Write();
   h1f->Write();
   phih->Write();
   reseventplaneh->Write();
   reseventplaneah->Write();
   reseventplanebh->Write();
   reseventplanech->Write();
   v2h->Write();
   phitrackseventh->Write();
   dphipairs_same->Write();
   dphipairs_mixed->Write();
   dphipairs_divided->Write();
   d4phih->Write();
   PSI2h->Write();
   PSI2PSI2foundh->Write();
   PHI2resh->Write();
   dphirealh->Write();
   dphimeash->Write();

   
}

